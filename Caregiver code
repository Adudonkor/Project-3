# Solution - enter your code solution below

        # Initializes the caregiver object with basic attributes
class Caregiver:
    def __init__(self, name, phone, email, pay_rate):
        self.name = name
        self.phone = phone
        self.email = email
        self.pay_rate = pay_rate
        self.hours = 0
        self.availability = {}

    
#Sets the caregiver's availability for a specific date and shift.
    def set_availability(self, date, shift, status="available"):
        self.availability[(date, shift)] = status
        
#Retrieves the caregiver's availability for a specific date and shift.
    def get_availability(self, date, shift):

        # Look up availability in the dictionary, defaulting to "available"
        status = self.availability.get((date, shift), "available")
        # Return a formatted string with the date, shift, and availability
        return f"Shift: {shift.capitalize()} on {date} is {status}."

class Shift:
    def __init__(self, date, shift_time):
        self.date = date
        self.shift_time = shift_time
        self.caregiver = None

class Schedule:
    def __init__(self):
        self.shifts = {}

    def add_shift(self, date, shift_time):
        shift = Shift(date, shift_time)
        self.shifts[(date, shift_time)] = shift

    def assign_caregiver(self, date, shift_time, caregiver):
        shift = self.shifts.get((date, shift_time))
        if shift:
            shift.caregiver = caregiver
            caregiver.hours += 6  # Since each shift is 6 hours

class Scheduler:
    def __init__(self, caregivers):
        self.caregivers = caregivers
        self.schedule = Schedule()

    def auto_assign_shifts(self):
        # Simple logic to assign caregivers based on availability and preferences
        for (date, shift_time), shift in self.schedule.shifts.items():
            for caregiver in self.caregivers:
                if caregiver.get_availability(date, shift_time) in ["preferred", "available"]:
                    self.schedule.assign_caregiver(date, shift_time, caregiver)
                    break

# Create an instance of Caregiver
caregiver = Caregiver("Jane Doe", "555-555-5555", "jane@example.com", 20.00)

# Check attributes
print(caregiver.name)         # Output: Jane Doe
print(caregiver.phone)        # Output: 555-555-5555
print(caregiver.email)        # Output: jane@example.com
print(caregiver.pay_rate)     # Output: 20.0

# Call methods to set and check availability
caregiver.set_availability("2024-11-01", "morning", "preferred")
print(caregiver.get_availability("2024-11-01", "morning"))  # Output: preferred

# Check for a time not set, expecting the default 'available'
print(caregiver.get_availability("2024-11-01", "afternoon"))  # Output: available
